variables: ## referenced with {{ user `â€¦` }}
    ## reasonable defaults
    instance_type: c4.large ## m1.small is too freaking small
    subnet_id: 'subnet-0b927637' # public b

    ## taken from the environment
    #aws_access_key: '{{ env `AWS_ACCESS_KEY` }}'
    #aws_secret_key: '{{ env `AWS_SECRET_KEY` }}'
    aws_region: us-east-1
    local_user: '{{ env `USER` }}'

    distro: centos
    distro_version: "7.2"

    chef_dir: "/tmp/packer-chef-client"
#    chef_env: "dev"
    cookbook_path: "cookbooks"
    vendor_cookbook_path: "vendor/cookbooks"
    data_bags_path: "data_bags"
    environments_path: "environments"

    ## must be provided with -var
    source_ami: ""
    vbox_image: ""
    git_sha: null
    recipes: null
    chef_env: ""
    #root_passwd: C1gRtmB33wQH9BvtzWT6hQAkaj+9dEEgg6ypIbFd6E/fod6f
    root_passwd: ""

    #    ami_regions:
    #      - us-west-1
    #      - us-west-2
    #      - eu-west-1

builders:
    ## consul, etcd2
    -   &ami-cluster-base
        name: ami-cluster-base
        ## https://www.packer.io/docs/builders/amazon-ebs.html
        type: amazon-ebs

        #access_key: '{{ user `aws_access_key` }}'
        #secret_key: '{{ user `aws_secret_key` }}'
        region: '{{ user `aws_region` }}'
        source_ami: '{{ user `source_ami` }}'
        instance_type: '{{ user `instance_type` }}'
        ssh_username: centos
        ssh_timeout: 10m
        ssh_pty: true
        ami_name: 'PLM {{ user `distro` }} {{ user `distro_version` }} {{ user `git_sha` }}/{{ timestamp }} - cluster-base'
        ami_virtualization_type: hvm
        ami_users: ## array of strings
            - "651435385715"

        ## used to tag the instance Packer launches for building the AMIs
        run_tags:
            creator: '{{ user `local_user` }}'
            delete_me: yep

        tags: &ami_tags
            distro:         '{{ user `distro` }}'
            version:        '{{ user `distro_version` }}'
            git_sha:        '{{ user `git_sha` }}'
            isotime:        '{{ isotime }}'
            timestamp:      '{{ timestamp }}'
            creator:        '{{ user `local_user` }}'
            source_ami:     '{{ user `source_ami` }}'
            source_region:  '{{ user `aws_region` }}'
            packer_builder: '{{ build_name }}'

        ami_block_device_mappings:
            -   device_name: /dev/xvda
                volume_size: 10
                delete_on_termination: true

        security_group_ids:
            - sg-75ae190f # default VPC
            - sg-56ae192c # allow SSH

        subnet_id: '{{ user `subnet_id` }}'
        associate_public_ip_address: false

    -   &vbox-cluster-base
        name: vbox-cluster-base
        type: virtualbox-ovf

        headless: true

        source_path: '{{ user `vbox_image` }}'

        http_directory: kickstart

        boot_wait: 10s
        boot_command:
            ## quoting/escaping of the LABEL is critical.  it's literally
            ## "CentOS 07 x86_64", but that needs to be a single argument to
            ## inst.stage2.
            ## https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Installation_Guide/chap-anaconda-boot-options.html
            ## net.ifnames=0 disables (consistent) "predictable network interface names"
            ## https://access.redhat.com/discussions/916973
            ## @todo pass root password as boot param
            - '<esc> vmlinuz initrd=initrd.img inst.stage2=hd:LABEL=CentOS\x207\x20x86_64 inst.ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/virtualbox.cfg inst.headless inst.cmdline noshell inst.loglevel=debug net.ifnames=0 console=ttyS0,115200 console=tty0<enter><wait>'

        #disk_size: 10240

        guest_additions_path: 'VBoxGuestAdditions_{{ .Version }}.iso'
        #guest_os_type: RedHat_64

        shutdown_command: "echo 'vagrant' | sudo -S systemctl poweroff"


        ssh_username: vagrant
        ssh_password: vagrant
        ssh_wait_timeout: 30m

        virtualbox_version_file: .vbox_version

        ## UNCOMMENT BELOW IF YOU NEED TO DEBUG THE IMAGE BUILDING STEP IN VIRTUALBOX
        ## https://www.virtualbox.org/wiki/Serial_redirect
        # vboxmanage:
        #     - [ "modifyvm", "{{ .Name }}", "--uart1", "0x3F8", "4" ]
        #     - [ "modifyvm", "{{ .Name }}", "--uartmode1", "file", "{{ pwd }}/console-packer.out" ]

    -   <<: *ami-cluster-base
        name: ami-container-host
        ami_name: 'PLM {{ user `distro` }} {{ user `distro_version` }} {{ user `git_sha` }}/{{ timestamp }} - container-host'

    -   <<: *ami-cluster-base
        name: ami-plm-base
        ami_name: 'PLM {{ user `distro` }} {{ user `distro_version` }} {{ user `git_sha` }}/{{ timestamp }} - plm-base'

    -   <<: *ami-cluster-base
        name: ami-gocd-server
        ami_name: 'PLM {{ user `distro` }} {{ user `distro_version` }} {{ user `git_sha` }}/{{ timestamp }} - gocd-server'

    -   <<: *ami-cluster-base
        name: ami-gocd-agent
        ami_name: 'PLM {{ user `distro` }} {{ user `distro_version` }} {{ user `git_sha` }}/{{ timestamp }} - gocd-agent'

    -   <<: *ami-cluster-base
        name: ami-gocd-minion
        ami_name: 'PLM {{ user `distro` }} {{ user `distro_version` }} {{ user `git_sha` }}/{{ timestamp }} - gocd-minion'

    -   <<: *ami-cluster-base
        name: ami-nomad-server
        ami_name: 'PLM {{ user `distro` }} {{ user `distro_version` }} {{ user `git_sha` }}/{{ timestamp }} - nomad-server'

    -   <<: *vbox-cluster-base
        name: vbox-container-host

    ## making the choice to make the vault servers AMIs instead of containers.
    ## like the consul servers, they need to be super stable.  vault servers
    ## will actually require operator intervention to unseal them when they're
    ## restarted.
    -   <<: *ami-cluster-base
        name: ami-vault-server
        ami_name: 'PLM {{ user `distro` }} {{ user `distro_version` }} {{ user `git_sha` }}/{{ timestamp }} - vault-server'

    -   <<: *vbox-cluster-base
        name: vbox-vault-server

    -   <<: *vbox-cluster-base
        name: vbox-gocd-agent

    -   <<: *vbox-cluster-base
        name: vbox-plm-base

    ## images with kernel-ml from elrepo
    -   <<: *ami-cluster-base
        name: ami-container-host-mlkernel
        ami_name: 'PLM {{ user `distro` }} {{ user `distro_version` }} {{ user `git_sha` }}/{{ timestamp }} - container-host-mlkernel'

    -   <<: *vbox-cluster-base
        name: vbox-container-host-mlkernel

    -   <<: *ami-cluster-base
        name: ami-gocd-agent-mlkernel
        ami_name: 'PLM {{ user `distro` }} {{ user `distro_version` }} {{ user `git_sha` }}/{{ timestamp }} - gocd-agent-mlkernel'

    -   <<: *vbox-cluster-base
        name: vbox-gocd-agent-mlkernel

post-processors:
    -   type: vagrant
        output: '{{ .BuildName }}_{{ user `git_sha` }}.box'
        only:
            - vbox-cluster-base
            - vbox-vault-server
            - vbox-plm-base

            - vbox-container-host
            - vbox-container-host-mlkernel
            - vbox-gocd-agent
            - vbox-gocd-agent-mlkernel

provisioners:
    ## while you can use 'only' and 'exclude' properties to select when provisioners
    ## are run, it's easier to use the PACKER_BUILDER_TYPE and PACKER_BUILD_NAME
    ## env vars in shell scripts to determine if they should be run.  This
    ## allows for build names with patterns, like "ami-".

    ## package up skel dir so it can be uploaded to the target (next step)
    ## much easier than a boatload of heredocs
    -   type: shell-local
        command: >
            cd {{ template_dir }}/skel/ ;
            find . -type f |
            tar -cz
            -f {{ template_dir }}/work/skel-{{ build_name }}.tgz
            -T -

    ## these have to exist or validation will fail. :-(
    ## so I've checked in zero-length files with these names :-( :-( :-(
    -   type: file
        source: "{{ template_dir }}/work/skel-{{ build_name }}.tgz"
        destination: /tmp/packer-skel.tgz

    ## this shell block is really only to specify defaults for others.
    ## copy/pasting the execute_command everwhere is crazy trouble-prone.
    -   &shell_default
        type: shell
        execute_command: 'chmod +x {{ .Path }}; {{ .Vars }} sudo -E {{ .Path }} && rm -f {{ .Path }}'
        scripts:
            - scripts/000-dump_env.sh

    ## the mlkernel variants; setup required before 
    -   <<: *shell_default
        only:
            - ami-container-host-mlkernel
            - vbox-container-host-mlkernel
            - ami-gocd-agent-mlkernel
            - vbox-gocd-agent-mlkernel
        scripts:
            - scripts/007-install-mainline-kernel.sh

    ## ALSO applies to *all* builders ## 
    -   <<: *shell_default
        scripts:
            - scripts/006-import-gpg-keys.sh
            - scripts/025-update.sh
            - scripts/025-cloud-init.sh

    ## container host (gocd-agent needs these, too)
    -   <<: *shell_default
        only:
            - ami-container-host
            - ami-container-host-mlkernel
            - vbox-container-host-mlkernel
            - ami-gocd-agent-mlkernel
            - ami-gocd-agent
            - ami-gocd-server
            - vbox-gocd-agent
            - vbox-gocd-agent-mlkernel
        scripts:
            - scripts/032-docker-host.sh
            - scripts/026-cluster-consul.sh
            - scripts/028-devtools.sh
            - scripts/030-gocd-vagrant.sh

    -   <<: *shell_default
        only:
            - ami-gocd-minion
        scripts:
            - scripts/032-docker-host.sh
            - scripts/026-cluster-consul.sh
            - scripts/031-gocd-minion.sh

    ## vault server
    -   <<: *shell_default
        only:
            - ami-vault-server
            - vbox-vault-server
        scripts:
            - scripts/034-vault-server.sh

    ## nomad server
    -   <<: *shell_default
        only:
            - ami-nomad-server
        scripts:
            - scripts/035-nomad.sh

    ## gocd agent
    -   <<: *shell_default
        only:
            - ami-gocd-agent-mlkernel
            - vbox-gocd-agent
            - vbox-gocd-agent-mlkernel
        scripts:
            - scripts/100-gocd-agent.sh

    -   <<: *shell_default
        scripts:
            - scripts/997-cleanup.sh
            - scripts/998-zerodisk.sh
            - scripts/999-lockdown.sh

    ## delete skel tarball
    -   type: shell
        inline: rm -f /tmp/packer-skel.tgz

#    -   type: chef-solo
#        cookbook_paths: ["cookbooks", "vendor/cookbooks"]
#        run_list: ["recipe[selinux::disabled]", '{{ user `recipes` }}']

    -   type: shell
        inline: sudo mkdir -p /etc/chef && sudo chmod 777 /etc/chef

    -   type: shell
        inline: sudo mkdir -p /tmp/packer-chef-client && sudo chmod 777 /tmp/packer-chef-client

    -   type: shell-local
        command: mkdir -p ./work/toupload/cookbooks; tar chf ./work/toupload/cookbooks/cookbooks.tar -C {{user `cookbook_path`}} .

    -   type: shell-local
        command: mkdir -p ./work/toupload/cookbooks; tar chf ./work/toupload/cookbooks/vcookbooks.tar -C {{user `vendor_cookbook_path`}} .

    -   type: file
        source: ./work/toupload/cookbooks
        destination: "{{user `chef_dir`}}"

    -   type: shell
        inline:
            - cd {{user `chef_dir`}}/cookbooks && tar xf cookbooks.tar
            - cd {{user `chef_dir`}}/cookbooks && tar xf vcookbooks.tar
            - rm cookbooks.tar vcookbooks.tar

    -   type: file
        source: ./data_bags
        destination: "{{user `chef_dir`}}"

    -   type: file
        source: ./environments
        destination: "{{user `chef_dir`}}"

#    -   type: file
#        source: "{{user `vendor_cookbook_path`}}"
#        destination: "{{user `chef_dir`}}/cookbooks/"
#        except:
#            - ami-cluster-base

    -   type: chef-client
        execute_command: "cd /etc/chef && sudo chef-client --local-mode -c /tmp/packer-chef-client/client.rb -j /tmp/packer-chef-client/first-boot.json"
        install_command: "curl -L https://www.chef.io/chef/install.sh | \
  {{if .Sudo}}sudo{{end}} bash -s -- -v 12.19.36"
        server_url: "http://localhost:8889"
        config_template: "templates/client.rb.template"
        skip_clean_node: "true"
        skip_clean_client: "true"
        run_list: ["recipe[selinux::disabled]", '{{ user `recipes` }}']

    -   type: shell-local
        command: >
            rm -f {{ template_dir }}/work/skel-{{ build_name }}.tgz
