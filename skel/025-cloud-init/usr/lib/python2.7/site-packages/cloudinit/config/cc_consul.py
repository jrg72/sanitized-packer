# -*- encoding: utf-8 -*-

## render /etc/consul.conf; config is converted to JSON
## https://www.consul.io/docs/agent/options.html#configuration_files
## example:
##    consul:
##        join_method: ec2-tags
##
##        config:
##            datacenter:         dc
##            server:             true
##            rejoin_after_leave: true
##            bootstrap_expect:   2
##            advertise_addr_wan: "${public_ipv4}"


from cloudinit.settings import PER_INSTANCE
from cloudinit import util
from cloudinit import templater
import StringIO
import json
import subprocess

# Modules are expected to have the following attributes.
# 1. A required 'handle' method which takes the following params.
#    a) The name will not be this files name, but instead
#    the name specified in configuration (which is the name
#    which will be used to find this module).
#    b) A configuration object that is the result of the merging
#    of cloud configs configuration with legacy configuration
#    as well as any datasource provided configuration
#    c) A cloud object that can be used to access various
#    datasource and paths for the given distro and data provided
#    by the various datasource instance types.
#    d) A argument list that may or may not be empty to this module.
#    Typically those are from module configuration where the module
#    is defined with some extra configuration that will eventually
#    be translated from yaml into arguments to this module.
# 2. A optional 'frequency' that defines how often this module should be ran.
#    Typically one of PER_INSTANCE, PER_ALWAYS, PER_ONCE. If not
#    provided PER_INSTANCE will be assumed.
#    See settings.py for these constants.
# 3. A optional 'distros' array/set/tuple that defines the known distros
#    this module will work with (if not all of them). This is used to write
#    a warning out if a module is being ran on a untested distribution for
#    informational purposes. If non existent all distros are assumed and
#    no warning occurs.

frequency = PER_INSTANCE


def handle(name, _cfg, _cloud, log, _args):
    svc_drop_in_path = "/etc/systemd/system/consul.service.d/10-cloud-init.conf"
    join_drop_in_path = "/etc/systemd/system/consul-join.service.d/10-cloud-init.conf"
    consul_wan_svc = "/etc/consul.d/service-consul-wan.json"
    
    ## consul config separated into two files because we may not have the acl
    ## token and encryption key at this time; it may be retrieved later from
    ## vault.  the separate config files should make it easier to manage with
    ## more granularity.
    
    ## primary consul config file
    main_consul_conf_path = "/etc/consul.conf"
    ## add'l config file that contains only acl_token and encrypt values
    consul_creds_path = "/etc/consul.d/creds.json"
    
    cfg = _cfg.get("consul")
    if not cfg:
        log.info("no consul config; not writing")
    else:
        main_consul_conf = {}
        consul_creds = {}
        
        for k, v in cfg["config"].items():
            if k in ("acl_token", "encrypt"):
                consul_creds[k] = v
            else:
                main_consul_conf[k] = v
        
        ## @todo add GCE support here
        template_params = {
            "private_ipv4": _cloud.datasource.metadata.get("local-ipv4"),
            "public_ipv4":  _cloud.datasource.metadata.get("public-ipv4"),
        }

        ## render main config file
        util.write_file(
            main_consul_conf_path,
            templater.render_string(
                json.dumps(main_consul_conf, indent=4),
                template_params
            ),
            mode=0400,
        )
        util.chownbyname(main_consul_conf_path, "consul", "consul")
        
        ## render credentials file, if there are any credentials in there.
        ## consul.service will not start until the file exists, but even in the
        ## "legacy" environments we have the gossip encryption key.
        if consul_creds:
            util.write_file(
                consul_creds_path,
                templater.render_string(
                    json.dumps(consul_creds, indent=4),
                    template_params
                ),
                mode=0400,
            )
            util.chownbyname(consul_creds_path, "consul", "consul")
        
        ## if this agent's a consul server, create a consul-wan service that
        ## advertises the wan address (which may be different than the lan
        ## address) and wan port
        if main_consul_conf.get("server", False) is True:
            wan_cfg = {
                "name": "consul-wan",
                "port": 8302,
            }

            ## wow, they've certainly made the addresses â€¦ configurable.
            serf_wan = main_consul_conf.get("advertise_addrs", {}).get("serf_wan")
            if serf_wan:
                ## advertise_addrs.serf_wan is "ip:port"
                serf_wan_addr, serf_wan_port = serf_wan.split(":", 1)
                wan_cfg["address"] = serf_wan_addr
                wan_cfg["port"] = int(serf_wan_port)
            else:
                serf_wan_port      = main_consul_conf.get("ports", {}).get("serf_wan")
                advertise_addr_wan = main_consul_conf.get("advertise_addr_wan")
                
                if serf_wan_port:
                    wan_cfg["port"] = serf_wan_port
                
                if advertise_addr_wan:
                    wan_cfg["address"] = advertise_addr_wan

            if wan_cfg.get("address") is None:
                log.warning("no wan address found in config")

            ## run through render_string as main_consul_conf is not rendered
            util.write_file(
                consul_wan_svc,
                templater.render_string(
                    json.dumps({"service": wan_cfg}, indent=4),
                    template_params
                ),
                mode=0400,
            )
            util.chownbyname(consul_wan_svc, "consul", "consul")

        ## consul.service config
        drop_in_buf = StringIO.StringIO()
        print >>drop_in_buf, "[Service]"
        ## set GOMAXPROC
        print >>drop_in_buf, 'Environment="GOMAXPROCS=%s"' % subprocess.check_output(["nproc"]).strip()

        util.write_file(svc_drop_in_path, drop_in_buf.getvalue(), 0400)
        
        ## consul-join.service config
        drop_in_buf = StringIO.StringIO()
        print >>drop_in_buf, "[Service]"
        ## set join method
        print >>drop_in_buf, 'Environment="JOIN_METHOD=%s"' % cfg["join_method"]

        util.write_file(join_drop_in_path, drop_in_buf.getvalue(), 0400)
